/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Labour } from "./Labour";
import { LabourCountArgs } from "./LabourCountArgs";
import { LabourFindManyArgs } from "./LabourFindManyArgs";
import { LabourFindUniqueArgs } from "./LabourFindUniqueArgs";
import { CreateLabourArgs } from "./CreateLabourArgs";
import { UpdateLabourArgs } from "./UpdateLabourArgs";
import { DeleteLabourArgs } from "./DeleteLabourArgs";
import { LabourService } from "../labour.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Labour)
export class LabourResolverBase {
  constructor(
    protected readonly service: LabourService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Labour",
    action: "read",
    possession: "any",
  })
  async _labourItemsMeta(
    @graphql.Args() args: LabourCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Labour])
  @nestAccessControl.UseRoles({
    resource: "Labour",
    action: "read",
    possession: "any",
  })
  async labourItems(
    @graphql.Args() args: LabourFindManyArgs
  ): Promise<Labour[]> {
    return this.service.labourItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Labour, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Labour",
    action: "read",
    possession: "own",
  })
  async labour(
    @graphql.Args() args: LabourFindUniqueArgs
  ): Promise<Labour | null> {
    const result = await this.service.labour(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Labour)
  @nestAccessControl.UseRoles({
    resource: "Labour",
    action: "create",
    possession: "any",
  })
  async createLabour(@graphql.Args() args: CreateLabourArgs): Promise<Labour> {
    return await this.service.createLabour({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Labour)
  @nestAccessControl.UseRoles({
    resource: "Labour",
    action: "update",
    possession: "any",
  })
  async updateLabour(
    @graphql.Args() args: UpdateLabourArgs
  ): Promise<Labour | null> {
    try {
      return await this.service.updateLabour({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Labour)
  @nestAccessControl.UseRoles({
    resource: "Labour",
    action: "delete",
    possession: "any",
  })
  async deleteLabour(
    @graphql.Args() args: DeleteLabourArgs
  ): Promise<Labour | null> {
    try {
      return await this.service.deleteLabour(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
