/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Billboard as PrismaBillboard,
  Booking as PrismaBooking,
} from "@prisma/client";

export class BillboardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BillboardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.billboard.count(args);
  }

  async billboards(
    args: Prisma.BillboardFindManyArgs
  ): Promise<PrismaBillboard[]> {
    return this.prisma.billboard.findMany(args);
  }
  async billboard(
    args: Prisma.BillboardFindUniqueArgs
  ): Promise<PrismaBillboard | null> {
    return this.prisma.billboard.findUnique(args);
  }
  async createBillboard(
    args: Prisma.BillboardCreateArgs
  ): Promise<PrismaBillboard> {
    return this.prisma.billboard.create(args);
  }
  async updateBillboard(
    args: Prisma.BillboardUpdateArgs
  ): Promise<PrismaBillboard> {
    return this.prisma.billboard.update(args);
  }
  async deleteBillboard(
    args: Prisma.BillboardDeleteArgs
  ): Promise<PrismaBillboard> {
    return this.prisma.billboard.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.billboard
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
