/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Booking as PrismaBooking,
  Payment as PrismaPayment,
  Billboard as PrismaBillboard,
  Client as PrismaClient,
  Image as PrismaImage,
  Subscription as PrismaSubscription,
} from "@prisma/client";

export class BookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BookingCountArgs, "select">): Promise<number> {
    return this.prisma.booking.count(args);
  }

  async bookings(args: Prisma.BookingFindManyArgs): Promise<PrismaBooking[]> {
    return this.prisma.booking.findMany(args);
  }
  async booking(
    args: Prisma.BookingFindUniqueArgs
  ): Promise<PrismaBooking | null> {
    return this.prisma.booking.findUnique(args);
  }
  async createBooking(args: Prisma.BookingCreateArgs): Promise<PrismaBooking> {
    return this.prisma.booking.create(args);
  }
  async updateBooking(args: Prisma.BookingUpdateArgs): Promise<PrismaBooking> {
    return this.prisma.booking.update(args);
  }
  async deleteBooking(args: Prisma.BookingDeleteArgs): Promise<PrismaBooking> {
    return this.prisma.booking.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async getBillboard(parentId: string): Promise<PrismaBillboard | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .billboard();
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }

  async getSubscription(parentId: string): Promise<PrismaSubscription | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .subscription();
  }
}
