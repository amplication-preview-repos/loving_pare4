/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BillboardWhereUniqueInput } from "../../billboard/base/BillboardWhereUniqueInput";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { ClientWhereUniqueInput } from "../../client/base/ClientWhereUniqueInput";
import { ImageWhereUniqueInput } from "../../image/base/ImageWhereUniqueInput";
import { PaymentCreateNestedManyWithoutBookingsInput } from "./PaymentCreateNestedManyWithoutBookingsInput";
import { EnumBookingStatus } from "./EnumBookingStatus";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";

@InputType()
class BookingCreateInput {
  @ApiProperty({
    required: false,
    type: () => BillboardWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BillboardWhereUniqueInput)
  @IsOptional()
  @Field(() => BillboardWhereUniqueInput, {
    nullable: true,
  })
  billboard?: BillboardWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ClientWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ClientWhereUniqueInput)
  @IsOptional()
  @Field(() => ClientWhereUniqueInput, {
    nullable: true,
  })
  client?: ClientWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ImageWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ImageWhereUniqueInput)
  @IsOptional()
  @Field(() => ImageWhereUniqueInput, {
    nullable: true,
  })
  image?: ImageWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutBookingsInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutBookingsInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutBookingsInput, {
    nullable: true,
  })
  payments?: PaymentCreateNestedManyWithoutBookingsInput;

  @ApiProperty({
    required: false,
    enum: EnumBookingStatus,
  })
  @IsEnum(EnumBookingStatus)
  @IsOptional()
  @Field(() => EnumBookingStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => SubscriptionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SubscriptionWhereUniqueInput)
  @IsOptional()
  @Field(() => SubscriptionWhereUniqueInput, {
    nullable: true,
  })
  subscription?: SubscriptionWhereUniqueInput | null;
}

export { BookingCreateInput as BookingCreateInput };
